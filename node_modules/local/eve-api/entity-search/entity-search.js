'use strict';

var request = require('request'),
    q = require('q'),
    xml2js = require('xml2js');

var charInfo = require('../character-info');

var URL = "https://api.eveonline.com/eve/OwnerID.xml.aspx?names=";

var cache = {}

function get(query) {
    if (!query) return q(null);

    query = query.trim();
    if (query == "") return q(null);

    var res = getFromCache(query);

    if (res) {
        return q(res);
    }

    // jumping through some hoops here to try to use charInfo to attach character infos, but still
    // returning the result of the query of charInfo is rejected/failed for whatever reason.
    var out = requestFromServer(query).then(function (res) {
        var outputDefer = q.defer();

        if (res && res.type === "character") {
            charInfo(res.id).then(function (x) {
                res.corporation = x.corporation;
                res.alliance = x.alliance;
            }).finally(function () {
                outputDefer.resolve(res);
            });
        }
        else {
            outputDefer.resolve(res);
        }

        return outputDefer.promise.then(function (res) {
            putInCache(query, res);
            return res;
        });
    });
    return out;
}

function requestFromServer(query) {
    var deferred = q.defer();

    var url = URL + query;

    request.get(url, function (err, response, body) {
        if (err) {
            deferred.reject(err);
        }
        else {
            xml2js.parseString(body, function (err, result) {
                if (err) {
                    deferred.reject(err);
                }
                else {
                    try {
                        var out = responseToObj(result);
                        deferred.resolve(out);
                    }
                    catch (e) {
                        deferred.reject("Error reading response.");
                    }
                }
            });
        }
    });

    return deferred.promise;
}

function responseToObj(data) {
    data = data.eveapi.result[0].rowset[0].row[0].$;

    var out = {
        id: Number(data.ownerID),
        name: data.ownerName,
        type: typeIdToTypeName(data.ownerGroupID)
    }
    if (!out.type)
        return null;
    return out;
}

function typeIdToTypeName(id) {
    var id = Number(id);

    if (id === 1)
        return "character";
    if (id === 2)
        return "corporation";
    if (id === 32)
        return "alliance";
    return null;
}

function getFromCache(query) {

    var item = cache[query];

    if (!item) return null;
    if (item.expires < Date.now()) return null;
    return item.data;
}

function putInCache(query, obj) {
    var expires = Date.now() + (1000 * 60 * 60);

    cache[query] = {
        expires: expires,
        data: obj
    }
}


module.exports = get;