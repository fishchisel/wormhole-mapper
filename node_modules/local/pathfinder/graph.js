'use strict';

module.exports = Graph;

var sysRep = require('local/repositories/system'),
    Node = require('./node.js');

var shortestPath = require('./priority-shortest-path.js');

/**
 * A graph representing systems in Eve.
 *
 * wormholes: array of wormholes to be included in the graph
 * bridges: array of bridges to be included in the graph
 * excludes: an object in the form of {hi: true, lo: true, nl: true, ws: true}
 *           giving excluded system types.
 */
function Graph(wormholes, bridges, excludes, minBridgeRange) {
    this.wormholes = wormholes ? wormholes : [];
    this.bridges = bridges ? bridges : [];
    this.excludes = excludes ? excludes : {};
    this.minBridgeRange = minBridgeRange !== undefined ? minBridgeRange : 3; 

    this.forbiddenBridges = {};
    this.forbiddenWormholes = {};

    this.connectedNodesCache = {};
}
Graph.prototype.copy = function () {
    var out = new Graph(this.wormholes, this.bridges, this.excludes, this.minBridgeRange);
    return out;
}

/**
 * Turns a systemId into a node representing the first link in a path.
 */
Graph.prototype.getNode = function (id) {
    var system = sysRep.getSystem(id);
    return new Node(system, "start");
}

/**
 * Given a systemId, returns an array of nodes representing the systems connected to it.
 */
Graph.prototype.getConnectedNodes = function (id) {
    var connectedNodes = this.connectedNodesCache[id];
    if (!connectedNodes) {
        connectedNodes = getConnectedNodes.call(this,id);
        this.connectedNodesCache[id] = connectedNodes;
    }

    var output = [];
    for (var i = 0, l = connectedNodes.length; i < l; i++) {
        var node = connectedNodes[i];
        var data = node.methodData;

        if (node.methodType === 'wormhole' && this.forbiddenWormholes[data.id]) continue;
        if (node.methodType === 'bridge' && this.forbiddenBridges[data.id]) continue;

        output.push(node);
    }
    return output;
}

function getConnectedNodes(id) {
    var connectedNodes = [];
    var system = sysRep.getSystem(id);

    var byGate = system.getGates();
    for (var i = 0; i < byGate.length; i++) {
        var sys = byGate[i];
        if (this.isExcluded(sys)) continue;

        var node = new Node(sys, "gate");
        connectedNodes.push(node);
    }

    for (var i = 0; i < this.wormholes.length; i++) {
        var wh = this.wormholes[i];
        var strt = wh.getStartSystem();
        var end = wh.getEndSystem();
        var sys = (strt === system ? end : (end === system ? strt : null));

        if (sys && !this.isExcluded(sys)) {
            var con = new Node(sys, "wormhole", wh);
            connectedNodes.push(con);
        }
    }

    for (var i = 0; i < this.bridges.length; i++) {
        var bridge = this.bridges[i];
        if (bridge.getHomeSystem() !== system) continue;

        var connectedSystems = this.getConnectionsForBridge(bridge);
        for (var j = 0; j < connectedSystems.length; j++) {
            var sys = connectedSystems[j];

            if (this.isExcluded(sys)) continue;
            var con = new Node(sys, "bridge", bridge);
            connectedNodes.push(con);
        }
    }
    return connectedNodes;
}

Graph.prototype.getConnectionsForBridge = function(bridge) {
    if (!this.staticGraph) {
        this.staticGraph = new Graph(null, null, this.excludes);
    }
    if (!this.bridgeConnectionsCache) {
        this.bridgeConnectionsCache = {};
    }
    if (!this.bridgeConnectionsCache[bridge.id]) {
        
        var sourceId = bridge.getHomeSystem().id;
        var systemsInRange = bridge.getSystemsInRange();

        systemsInRange = systemsInRange.filter(function (x) {
            var path = shortestPath(this.staticGraph, sourceId, x.id, null, this.minBridgeRange);

            return path === null;
        },this);
        this.bridgeConnectionsCache[bridge.id] = systemsInRange;
    }
    return this.bridgeConnectionsCache[bridge.id];
}

Graph.prototype.forbidBridge = function (bridgeId) {
    this.forbiddenBridges[bridgeId] = true;
}
Graph.prototype.forbidWormhole = function (wormholeId) {
    this.forbiddenWormholes[wormholeId] = true;
}
Graph.prototype.bridgeIsForbidden = function (bridgeId) {
    return this.forbiddenBridges[bridgeId];
}
Graph.prototype.wormholeIsForbidden = function (wormholeId) {
    return this.forbiddenWormholes[wormholeId];
}
Graph.prototype.clearForbidden = function () {
    this.forbiddenBridges = {};
    this.forbiddenWormholes = {};
}

Graph.prototype.isExcluded = function (system) {
    if (this.excludes.hi && system.isHighsec())
        return true;
    if (this.excludes.lo && system.isLowsec())
        return true;
    if (this.excludes.nl && system.isNullsec())
        return true;
    if (this.excludes.ws && system.isWormholeSpace())
        return true;
    return false;
}
