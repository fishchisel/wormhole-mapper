'use strict';

var expect = require('chai').expect;

var baseRep = require('local/repositories');
var sysRep = require('local/repositories/system');
baseRep.setStaticDataRoot('./');

var Graph = require('../graph.js');

var ids = {
    aeschee: 30005008,
    lisbaetanne: 30005007,
    oldManStar: 30005000,
    heydieles: 30004979,
    beke: 30005234
};

var Bridge = require('local/repositories/bridge/bridge.js');
Bridge.prototype.getSystemsInRange = function() {
    return this.systemsInRange;
}

var bridges = {};
function createBridges() {
    bridges.aeschee = new Bridge(1, { homeSystem: ids.aeschee });
    bridges.aeschee.systemsInRange = [
        sysRep.getSystem(ids.lisbaetanne),
        sysRep.getSystem(ids.oldManStar),
        sysRep.getSystem(ids.heydieles),
        sysRep.getSystem(ids.beke)
    ];
}


describe('Graph tests', function () {
    before(function (done) {
        sysRep.initialize().done(function () {
            createBridges();
            done();
        });
    });

    it("Gets all connections", function () {
        var graph = new Graph(null, [bridges.aeschee], null, 0);

        var result = graph.getConnectionsForBridge(bridges.aeschee);
        expect(result.length).equal(4);
    });

    it("Gets >1j connections with minlength = 1", function () {
        var graph = new Graph(null, [bridges.aeschee], null, 1);

        var result = graph.getConnectionsForBridge(bridges.aeschee);
        expect(result.length).equal(3);
    });

    it("Gets >2j connections with minlength = 2", function () {
        var graph = new Graph(null, [bridges.aeschee], null, 2);

        var result = graph.getConnectionsForBridge(bridges.aeschee);
        expect(result.length).equal(2);
    });

});