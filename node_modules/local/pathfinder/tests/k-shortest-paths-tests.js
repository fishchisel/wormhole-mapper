'use strict';

var expect = require('chai').expect;

var baseRep = require('local/repositories');
var sysRep = require('local/repositories/system');
baseRep.setStaticDataRoot('./');

var Graph = require('../graph.js'),
    Wormhole = require('local/repositories/wormhole/wormhole.js');

var shortestPaths = require('../k-shortest-paths.js');

var ids = {
    aeschee: 30005008,
    lisbaetanne: 30005007,
    oldManStar: 30005000,
    beke: 30005234
};

var wormholes = {
    aeschee_oms: new Wormhole(1, {
        startSystem: ids.aeschee,
        endSystem: ids.oldManStar
    }),
}



describe('Modifed Yens Algorithm Tests', function () {
    before(function (done) {
        sysRep.initialize().done(function () {
            done();
        });
    });

    it("A -> A route is null", function () {
        var graph = new Graph();
        var result = shortestPaths(graph, ids.aeschee, ids.aeschee,100);
        expect(result.length).equal(0);
    });

    it("A -> B 1j single route only", function () {
        var graph = new Graph();
        var result = shortestPaths(graph, ids.aeschee, ids.lisbaetanne, 100);
        expect(result.length).equal(1);
    });

    it("A -> B 9j single route only", function () {
        var graph = new Graph();
        var result = shortestPaths(graph, ids.aeschee, ids.beke,100);
        expect(result.length).equal(1);
    });

    it("A -> B 3j with wormhole two routes", function () {
        var graph = new Graph([wormholes.aeschee_oms], []);
        var result = shortestPaths(graph, ids.aeschee, ids.oldManStar, 100);

        var route1 = result[0];
        var route2 = result[1];

        expect(result.length).equal(2);

        expect(route1.length).equal(2);
        expect(route1[0].id).equal(ids.aeschee);
        expect(route1[1].id).equal(ids.oldManStar);
        expect(route1[1].methodType).equal("wormhole");

        expect(route2.length).equal(3);
        expect(route2[0].id).equal(ids.aeschee);
        expect(route2[2].id).equal(ids.oldManStar);
        expect(route2[2].methodType).equal("gate");


    });

});