'use strict';

var expect = require('chai').expect;

var baseRep = require('local/repositories');
var sysRep = require('local/repositories/system');
baseRep.setStaticDataRoot('./');

var Graph = require('../graph.js');

var pathCache = require('../path-cache.js');

var ids = {
    aeschee: 30005008,
    lisbaetanne: 30005007,
    oldManStar: 30005000,
    beke: 30005234
};


describe('Path Cache tests', function () {
    before(function (done) {
        sysRep.initialize().done(function () {
            done();
        });
    });
    beforeEach(function () {
        pathCache.clearCache();
    });

    it("Empty at start", function () {
        expect(pathCache.countCachedPaths()).equal(0);
        expect(pathCache.countCachedJumps()).equal(0);
    });

    it("No paths at start", function () {
        var args = {
            startSys: sysRep.getSystem(ids.aeschee),
            endSys: sysRep.getSystem(ids.lisbaetanne),
        };
        expect(pathCache.hasPath(args)).equal(false);
        expect(pathCache.hasJumpCount(args)).equal(false);
    });

    it("Can Set Jumps", function () {
        var args = {
            startSys: sysRep.getSystem(ids.aeschee),
            endSys: sysRep.getSystem(ids.lisbaetanne),
        };
        pathCache.setJumpCount(1, args);
        expect(pathCache.hasPath(args)).equal(false);
        expect(pathCache.hasJumpCount(args)).equal(true);
    });

    it("Can Set Path", function () {
        var args = {
            startSys: sysRep.getSystem(ids.aeschee),
            endSys: sysRep.getSystem(ids.lisbaetanne),
        };
        var path = [
            { id: ids.aeschee },
            { id: ids.lisbaetanne }
        ];

        pathCache.setPath(path, args);
        expect(pathCache.hasPath(args)).equal(true);
        expect(pathCache.hasJumpCount(args)).equal(false);

        var path = pathCache.getPath(args);

        expect(path.length).equal(2);
        expect(path[0].id).equal(ids.aeschee);
        expect(path[0].methodType).equal('gate');
    });
});