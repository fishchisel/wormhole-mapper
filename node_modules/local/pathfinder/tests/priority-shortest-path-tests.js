'use strict';

var expect = require('chai').expect;

var baseRep = require('local/repositories');
var sysRep = require('local/repositories/system');
baseRep.setStaticDataRoot('./');

var Graph = require('../graph.js'),
    Wormhole = require('local/repositories/wormhole/wormhole.js');

var shortestPath = require('../priority-shortest-path.js');

var ids = {
    aeschee: 30005008,
    lisbaetanne: 30005007,
    oldManStar: 30005000,
    ladistier: 30004999,
    beke: 30005234,
    hevrice: 30005320
};

var wormholes = {
    aeschee_oms: new Wormhole(1, {
        startSystem: ids.aeschee,
        endSystem: ids.oldManStar
    }),
}

var Bridge = require('local/repositories/bridge/bridge.js');
Bridge.prototype.getSystemsInRange = function() {
    return this.systemsInRange;
}

var bridges = {};
function createBridges() {
    bridges.ladistier = new Bridge(2, { homeSystem: ids.ladistier });
    bridges.ladistier.systemsInRange = [
        sysRep.getSystem(ids.hevrice),
    ];
}


describe('Priority Shortest Path Tests', function () {
    before(function (done) {
        sysRep.initialize().done(function () {
            createBridges();
            done();
        });
    });

    it("A -> A route is null", function () {
        var graph = new Graph();
        var result = shortestPath(graph, ids.aeschee, ids.aeschee);
        expect(result).equal(null);
    });

    it("A -> B 1j route is valid", function () {
        var graph = new Graph();
        var result = shortestPath(graph, ids.aeschee, ids.lisbaetanne);
        expect(result.length).equal(2);
        expect(result[0].id).equal(ids.aeschee);
        expect(result[1].id).equal(ids.lisbaetanne);
        expect(result[1].methodType).equal("gate");
    });

    it("A -> B 2j route is valid", function () {
        var graph = new Graph();
        var result = shortestPath(graph, ids.aeschee, ids.oldManStar);
        expect(result.length).equal(3);
    });

    it("A -> B 9j route is valid", function () {
        var graph = new Graph();
        var result = shortestPath(graph, ids.aeschee, ids.beke);
        expect(result.length).equal(10);
    });

    it("A -> B 32j route avoiding highsec is valid", function () {
        var graph = new Graph();

        var lowPriorityFunc = function (node) {
            return node.system.isHighsec();
        };

        var result = shortestPath(graph, ids.aeschee, ids.beke, lowPriorityFunc);
        expect(result.length).equal(32);
    });

    it("A -> B 1j route with wormhole is valid", function () {
        var graph = new Graph([wormholes.aeschee_oms], []);
        var result = shortestPath(graph, ids.aeschee, ids.oldManStar);

        expect(result.length).equal(2);
        expect(result[0].id).equal(ids.aeschee);
        expect(result[1].id).equal(ids.oldManStar);
        expect(result[1].methodType).equal("wormhole");
    });

    it("A -> B 2j route with maxlength = 1 is null", function () {
        var graph = new Graph();
        var result = shortestPath(graph, ids.aeschee, ids.oldManStar,null,1);

        expect(result).equal(null);
    });

    it("A -> B 2j route with maxlength = 2 is valid", function () {
        var graph = new Graph();
        var result = shortestPath(graph, ids.aeschee, ids.oldManStar, null, 2);

        expect(result.length).equal(3);
    });

    it("Prefers gates to bridges", function () {
        var graph = new Graph(null, [bridges.ladistier],null,2);

        var result = shortestPath(graph, ids.aeschee, ids.hevrice);

        var hasBridges = result.some(function (x) { return x.methodType === 'bridge' });

        expect(hasBridges).equal(false);

    });

});