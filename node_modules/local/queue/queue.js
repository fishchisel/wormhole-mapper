'use strict';

module.exports = Queue;

/*

Queue.js

A function to represent a queue

Created by Stephen Morley
Modified by Oliver

License: http://creativecommons.org/publicdomain/zero/1.0/legalcode

*/

/* Creates a new queue. A queue is a first-in-first-out (FIFO) data structure -
 * items are added to the end of the queue and removed from the front.
 */
function Queue() {
    this.queue = [];
    this.offset = 0;
}
Queue.prototype.getLength = function () {
    return this.queue.length - offset;
}
Queue.prototype.isEmpty = function () {
    return this.queue.length == 0;
}
Queue.prototype.enqueue = function (item) {
    this.queue.push(item);
}
Queue.prototype.dequeue = function () {
    // if the queue is empty, return immediately
    if (this.queue.length == 0) return undefined;

    // store the item at the front of the queue
    var item = this.queue[this.offset];

    // increment the offset and remove the free space if necessary
    if (++this.offset * 2 >= this.queue.length) {
        this.queue = this.queue.slice(this.offset);
        this.offset = 0;
    }

    // return the dequeued item
    return item;
}
Queue.prototype.peek = function () {
    return (this.queue.length > 0 ? this.queue[this.offset] : undefined); 
}
