'use strict';

var q = require('q');

var base = require('../base');

// From: http://stackoverflow.com/questions/22537311/angular-ui-router-login-authentication

var fbRef;

var identityDeferred = q.defer();
var _identity = undefined;
var _authenticated = false;

var principalChangedHandlers = [];

var initialized = false;

var me = {
    isIdentityResolved: function () {
        me.initialize();
        return _identity !== undefined;
    },
    isAuthenticated: function () {
        me.initialize();
        return _authenticated;
    },
    isInRole: function (role) {
        me.initialize();
        if (!_authenticated || !_identity.roles) return false;

        return _identity.roles.indexOf(role) != -1;
    },
    isInAnyRole: function (roles) {
        me.initialize();
        if (!_authenticated || !_identity.roles) return false;

        for (var i = 0; i < roles.length; i++) {
            if (this.isInRole(roles[i])) return true;
        }

        return false;
    },
    identity: function () {
        me.initialize();
        if (_identity === undefined) {
            return identityDeferred.promise;
        }
        else {
            return q(_identity)
        }
    },
    loginWithFirebase: function (firebaseSecret) {

        me.initialize();
        var deferred = q.defer();


        fbRef.authWithCustomToken(firebaseSecret, function (error, data) {
            if (error)
                deferred.reject(error);
            attachRoles(data);
            deferred.resolve(data);
        });
        return deferred.promise;
    },
    logout: function () {
        me.initialize();
        fbRef.unauth();
    },

    principalChanged: function (handler) {
        me.initialize();
        if (handler !== undefined) {
            principalChangedHandlers.push(handler)
        }
        else {
            principalChangedHandlers.forEach(function (item) {
                item(_identity);
            });
        }
    },

    initialize: function () {
        if (!initialized) {
            initialized = true;
            fbRef = base.getRef();
            updateOnAuth();
        }
    }
};

function attachRoles(authData) {

    if (authData && !authData.roles) {
        authData.roles = ['user'];
        if (authData.auth.isAdmin)
            authData.roles.push('admin');
    }
    return authData;
}

function updateOnAuth() {
    fbRef.onAuth(function (authData) {
        if (authData) {
            _identity = authData;
            attachRoles(authData);
            _authenticated = true;
        }
        else {
            _identity = null;
            _authenticated = false;
        }

        identityDeferred.resolve(_identity);
        me.principalChanged();
    });
}


module.exports = me;

