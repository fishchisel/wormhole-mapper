'use strict';

var moment = require('moment');
var Segment = require('./leaderboard-segment');


var LeaderboardEntry = function (id, data) {
    if (!data) data = {};
    if (!data.days) data.days = {};

    this.id = id;

    this.allTime = new Segment("allTime", data.allTime);
    this.findsPaidFor = new Segment("findsPaidFor", data.findsPaidFor);
    this.totalPaidAmount = data.totalPaidAmount ? data.totalPaidAmount : 0;

    this.days = {};
    for (var key in data.days) {
        this.days[key] = new Segment(key, data.days[key]);
    }

    this.lastModified = data.lastModified ? data.lastModified : 0;
}

LeaderboardEntry.prototype.addStats = function(time, stats) {

    var day = this.getDayForTime(time);
    if (!day) {
        day = this.createNewDay(time);
        this.days[day.id] = day;
    }

    day.add(stats);
}
LeaderboardEntry.prototype.getDayForTime = function(time) {
	for (var key in this.days) {
		var day = this.days[key];
		if (day.timeInPeriod(time)) return day;
	}
	return null;
}
LeaderboardEntry.prototype.createNewDay = function(time) {
    var mom = moment(time).zone('+0000');
    var stt = mom.startOf('day').valueOf();
    var end = mom.endOf('day').valueOf();

    var id = mom.startOf('day').format('YYYY-MM-DD');

    var segment = new Segment(id, {
        ps: stt,
        pe: end
    });
    return segment;
}

LeaderboardEntry.prototype.getLastModifiedPretty = function () {
    if (!this.lastModified) return "-";
    return moment(this.lastModified).format("llll");
}
LeaderboardEntry.prototype.getLastModifiedFuzzy = function () {
    if (!this.lastModified) return "-";
    return moment(this.lastModified).fromNow();
}

LeaderboardEntry.prototype.getTotal = function () {
    var out = new Segment();

    for (var key in this.days) {
        var day = this.days[key];
        out.add(day);
    }
    out.add(this.allTime);
    
    return out;
}
LeaderboardEntry.prototype.getFindsPaidFor = function () {
    return this.findsPaidFor;
}
LeaderboardEntry.prototype.setFindsPaidFor = function (segment) {
    this.findsPaidFor = new Segment("findsPaidFor", segment.toRemoteForm());
}

LeaderboardEntry.prototype.getDays = function (numDaysBack) {

    var current = Date.now();

    var out = [];
    for (var count = 0; count < numDaysBack; count++) {

        var dayDate = current - (count * 1000 * 60 * 60 * 24);
        
        var day = this.getDayForTime(dayDate);
        if (!day) day = this.createNewDay(dayDate);
        out.push(day);
    }
    return out;
}

LeaderboardEntry.prototype.getDaysTotal = function (numDaysBack) {
    var days = this.getDays(numDaysBack);

    return days.reduce(function (prev, curr) {
        return prev.add(curr);
    }, new Segment());
}

module.exports = LeaderboardEntry;