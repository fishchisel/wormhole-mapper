'use strict';

var ScannedSystem = require('./scanned-system'),
    baseRepository = require('../base'),
    wormholeRepository = require('../wormhole'),
    signatureRepository = require('../signature'),
    systemRepository = require('../system')

var q = require('q');

var base = baseRepository({
    path: 'systems',
    isValid: function(localData) {
        return localData.id;
    },
	makeLocal: function (id, data) {
	    return new ScannedSystem(systemRepository.getSystem(id), data);
	},
	makeRemote: function (data) {
		var scannedSystemJson = {
			isPinned: data.isPinned ? true : false,
			isStarred: data.isStarred ? true : false,
			lastScanned: data.lastScanned ? data.lastScanned : null,
			lastPartialScan : data.lastPartialScan ? data.lastPartialScan : null,
			lastModified: new Date().getTime(),
			note: data.note ? data.note : null
		}
		return scannedSystemJson;
	},
    pruneRemote: true
});

var me = {
	//getSystem:
	getSystems: base.getAll,
	getSystemsArray: base.getArray,
	updateSystem: base.update,
    deleteSystem: base.delete,
	systemsChanged: base.changed,
	systemsChangedRemoveHandler: base.changedRemoveHandler,
	initialize: base.initialize,
    supressChanged: base.supressChanged
};
me.getSystem = function (id) {
	var res = base.get(id);
	if (!res)
	    res = new ScannedSystem(systemRepository.getSystem(id));
	return res;
};
me.initialize = function () {
    var a = base.initialize();
    var b = systemRepository.initialize();
    var c = signatureRepository.initialize();
    var d = wormholeRepository.initialize();

    return q.all([a, b, c, d]);
}


//-----------------------------------------------------------------------------------------
// Handler for listening to changes to a particular system

var systemChangedHandlers = {};
var oldSystemDetails = {};

me.systemChanged = function(systemId, handler) {
	var id = systemId;

	if (handler !== undefined) {
		if (!systemChangedHandlers[id]) {
			systemChangedHandlers[id] = [];

		}
		addSystemDetails(me.getSystem(id));
		systemChangedHandlers[id].push(handler);
	}
	else {
		systemChangedHandlers[id].forEach(function (item) {
			item(me.getSystem(id));
		});
	}
}
me.systemChangedRemoveHandler = function (systemId, handler) {
	systemChangedHandlers[systemId].remove(handler);
}

function addSystemDetails(scannedSystem) {
	oldSystemDetails[scannedSystem.id] = {
		lastModified: scannedSystem.lastModified,
		wormholes: scannedSystem.getWormholes(),
		sigs: scannedSystem.getSignatures()
	}
}

function fireSystemChanged(system) {
	addSystemDetails(system);
	me.systemChanged(system.id);
}

me.systemsChanged(function () {
	var syss = me.getSystemsArray();

	syss.forEach(function (sys) {
		var oldSys = oldSystemDetails[sys.id];
		if (oldSys) {
			if (oldSys.lastModified !== sys.lastModified)
				fireSystemChanged(sys);
		}
	});
});

wormholeRepository.changed(function () {
	Object.keys(oldSystemDetails).forEach(function (id) {
		var sysDetails = oldSystemDetails[id]
		var newSys = me.getSystem(id);

		var oldWhls = sysDetails.wormholes;
		var newWhls = newSys.getWormholes();

		var changes = oldWhls.detectChanges(newWhls);
		if (changes)
			fireSystemChanged(newSys);
	});
});

signatureRepository.signaturesChanged(function () {
	Object.keys(oldSystemDetails).forEach(function (id) {
		var sysDetails = oldSystemDetails[id]
		var newSys = me.getSystem(id);

		var oldSigs = sysDetails.sigs;
		var newSigs = newSys.getSignatures();

		var changes = oldSigs.detectChanges(newSigs);
		if (changes)
			fireSystemChanged(newSys);
	});
});

module.exports = me;