'use strict';
var moment = require('moment');
var logAccess = require('../log-access-helpers');

var _usrRep;

var Signature = function (args) {
	if (!args)
		return;

	this.id = args.id;
	this.systemId = args.systemId;

	this.wormholeId = args.wormholeId;

	this.type = args.type;
	this.dateFound = args.dateFound;
	this.lastScanned = args.lastScanned;
	this.lastModified = args.lastModified;
	this.note = args.note;

	this.log = args.log ? args.log : {};
};
Signature.prototype.clone = function () {
	var s = new Signature();
	s.id = this.id;
	s.systemId = this.systemId;
	s.wormholeId = this.wormholeId;
	s.type = this.type;
	s.dateFound = this.dateFound;
	s.lastScanned = this.lastScanned;
	s.lastModified = this.lastModified;
	s.note = this.note;
	s.log = this.log;
	return s;
}

Signature.prototype.equals = function (other) {
    if (this.systemId !== other.systemId)
        return false;
    if (this.id === other.id)
        return true;

    try {
        var thisPart = this.id.split('-')[0];
        var otherPart = other.id.split('-')[0];
        return thisPart === otherPart;
    }
    catch (e) {
        return false;
    }
}

Signature.prototype.getDateFoundPretty = function () {
	return moment(this.dateFound).format("llll");
}
Signature.prototype.getDateFoundFuzzy = function () {
	return moment(this.dateFound).fromNow();
}
Signature.prototype.getLastScannedPretty = function () {
	return moment(this.lastScanned).format("llll");
}
Signature.prototype.getLastScannedFuzzy = function () {
	return moment(this.lastScanned).fromNow();
}

Signature.SHORT_NOTE_LENGTH = 16;

Signature.prototype.noteIsShort = function () {
	return this.note ? this.note.length <= Signature.SHORT_NOTE_LENGTH : true;
}
Signature.prototype.noteIsMedium = function () {
	return !this.noteIsShort() && this.note.length <= 140;
}
Signature.prototype.noteIsTooLong = function () {
	return this.note ? this.note.length > 140 : false;
}

Signature.prototype.getShortNote = function () {
	if (!this.note)
	    return null;
	if (this.noteIsShort())
	    return this.note;
	else
	    return this.note.substring(0, Signature.SHORT_NOTE_LENGTH) + "\u2026"; //ellipses
}

Signature.prototype.getCreatorId = logAccess.getCreatorId;
Signature.prototype.getLastEditorId = logAccess.getLastEditorId;
Signature.prototype.getCreator = logAccess.getCreator;
Signature.prototype.getLastEditor = logAccess.getLastEditor;


Signature.attachRepositories = function (userRep) {
    _usrRep = userRep;
}

Signature.allowedTypes = ['wormhole', 'combat', 'data', 'ore', 'relic', 'gas'];


module.exports = Signature;