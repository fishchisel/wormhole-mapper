'use strict';

var request = require('local/fetch-file'),
    q = require('q');

var System = require('./system');

var base = require('../base');


var SYSTEMS_URL = "data/systems.json";
 
function getUrl() { return base.getStaticDataRoot() + SYSTEMS_URL };

// the main object
var me = {};

// fields
var systems;
var systemsByName;
var systemsArray;

var initializeDefer;

me.initialize = function () {
    return _loadSystems();
};

//-----------------------------------------------------------------------------------------
// Load data

var _loadSystems = function () {
    if (!initializeDefer) {
        initializeDefer = q.defer();

        request(getUrl(), function (error, response, body) {
            if (error) {
                console.error(error);
                initializeDefer.reject(error);
            } else {
                var json = JSON.parse(body);
                _createLocalSystems(json);
                initializeDefer.resolve();
            }
        });
    }
    return initializeDefer.promise;
}

//-----------------------------------------------------------------------------------------
// Systems + system links

var _createLocalSystems = function (systemsJson) {
    systems = Object.create(null);
    systemsByName = {};
    systemsArray = []
    for (var i = 0; i < systemsJson.length; i++) {
        var item = systemsJson[i];
        var system = new System(item);
        systems[item.systemId] = system;
        systemsByName[item.systemName.toLowerCase()] = system;
        systemsArray.push(system);
    }
    systemsArray.sort(function (a, b) {
        if (a.systemName > b.systemName) return 1;
        if (a.systemName < b.systemName) return -1;
        return 0;
    });
}

me.getSystems = function () {
    return systems;
};
me.getSystemsArray = function () {
    return systemsArray;
}
me.getSystem = function (id) {
    return systems[id];
}
me.getSystemByName = function (name) {
    return name ? systemsByName[name.toLowerCase()] : undefined;
}
me.getSystemsByName = function (names) {
    return names.map(function (name) { return me.getSystemByName(name); });
};
me.searchSystems = function (query, maxResult, emptyIfMatch) {
    if (emptyIfMatch) {
        var sys = me.getSystemByName(query);
        return sys ? sys : _searchSystems(query, maxResult);
    }
    else {
        return _searchSystems(query, maxResult);
    }
}
var _searchSystems = function (query, maxResult) {
    query = query.trim().toLowerCase();

    var results = [];
    for (var i = 0; i < systemsArray.length; i++) {
        var sysName = systemsArray[i].systemName.toLowerCase();
        if (sysName.startsWith(query))
            results.push(systemsArray[i]);
        if (results.length >= maxResult)
            break;
    }
    return results;
}
me.getSystemsWithinLightyears = function (rootSystem, lightYears) {
    var systemsInRange = [];

    for (var i = 0; i < systemsArray.length; i++) {
        var sys = systemsArray[i];
        if (rootSystem === sys || sys.isHighsec())
            continue;

        var x = Math.abs(sys.xpos - rootSystem.xpos);
        var y = Math.abs(sys.ypos - rootSystem.ypos);
        var z = Math.abs(sys.zpos - rootSystem.zpos);
        if (x < lightYears && y < lightYears && z < lightYears) {
            var dist = Math.sqrt((x * x) + (y * y) + (z * z));
            if (dist < lightYears) {
                systemsInRange.push(sys);
            }
        }
    }
    return systemsInRange;
}
me.getSystemsDistance = function (a, b) {
    var x = Math.abs(a.xpos - b.xpos);
    var y = Math.abs(a.ypos - b.ypos);
    var z = Math.abs(a.zpos - b.zpos);

    var dist = Math.sqrt((x * x) + (y * y) + (z * z));
    return dist;
}



module.exports = me;