'use strict';

var _sysRep, _wormholeRep, _sigRep;
var _pathfinder;

var System = function (systemJson) {
	this.id = systemJson.systemId;
	this.systemName = systemJson.systemName;
	this.regionName = systemJson.regionName;
	this.security = systemJson.security;

	this.connectedSystemsIds = systemJson.connectedSystems;

	this.xpos = systemJson.xpos;
	this.ypos = systemJson.ypos;
	this.zpos = systemJson.zpos;
}

System.prototype.isHighsec = function () {
	return this.security >= 0.45; //  truesec rounds up
}
System.prototype.isLowsec = function () {
	return this.security < 0.45 && this.security > 0;
}
System.prototype.isNullsec = function () {
	return this.security <= 0 && !this.isWormholeSpace();
}
System.prototype.isWormholeSpace = function () {
    var match = this.systemName.match(/^J[0-9-]+$/); //see J1226-0
	return match !== null || this.systemName === "Thera";
}
System.prototype.isKnownSpace = function () {
	return !this.isWormholeSpace();
}
System.prototype.getSecurityPretty = function () {
	if (this.security < 0)
		return "0.0";
	else {
		return (Math.round(this.security * 10) / 10).toFixed(1);
	}
}

System.prototype.getTooltip = function () {
	return "{0} / {1}".format(this.getSecurityPretty(), this.regionName);
}

var sysGates = {};
// there is a bug in angular JS that results in very very slow state load times and
// occassional 'too much recursion' errors if we pass objects with complex fields
// as stateParams to controllers. This is a work around.
System.prototype.getGates = function () {
    if (sysGates[this.id] === undefined) {
        sysGates[this.id] = this.connectedSystemsIds.map(function (item) {
            return _sysRep.getSystem(item);
        });
    }
    return sysGates[this.id];
};
System.prototype.getDistanceFromSystem = function (otherSystem) {
    return _sysRep.getSystemsDistance(this, otherSystem);
}

System.prototype.getStaticJumpsToSystem = function (otherSystem) {
    var jumps = _pathfinder.findStaticJumpCount({
        startSys: this,
        endSys: otherSystem
    });
    return jumps;
}
System.prototype.getSignatures = function () {
    return _sigRep.getSignaturesForSystem(this);
}
System.prototype.getWormholes = function () {

    var items = _wormholeRep.getArray().filter(function (wh) {
        return wh.startSystemId == this.id || wh.endSystemId == this.id;
    }, this);

    return items;
}

System.attachRepositories = function (systemRepository, wormholeRepository, signatureRepository) {
    _sysRep = systemRepository;
    _wormholeRep = wormholeRepository;
    _sigRep = signatureRepository;
}
System.attachPathfinder = function (pathfinder) {
    _pathfinder = pathfinder;
}


module.exports = System;