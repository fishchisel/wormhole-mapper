'use strict';

var baseRepository = require('../base'),
    moment = require('moment');

var User = function (key, args) {
    this.id = Number(key);
    this.name = args.name;
    this.alliance = args.alliance;
    this.corporation = args.corp ? args.corp : "";
    this.lastLogin = args.lastLogin ? args.lastLogin : 0;
    this.routesSearched = args.rs ? args.rs : 0;
    this.lastActivity = args.la ? args.la : 0;
}
User.prototype.getPortraitUrl = function (size) {
    return "https://image.eveonline.com/Character/" + this.id + "_" + size + ".jpg";
}
User.prototype.getLastLoginPretty = function () {
    if (!this.lastLogin) return "-";
    return moment(this.lastLogin).format("llll");
}
User.prototype.getLastLoginFuzzy = function () {
    if (!this.lastLogin) return "-";
    return moment(this.lastLogin).fromNow();
}
User.prototype.getLastActivityPretty = function () {
    if (!this.lastActivity) return "-";
    return moment(this.lastActivity).format("llll");
}
User.prototype.getLastActivityFuzzy = function () {
    if (!this.lastActivity) return "-";
    return moment(this.lastActivity).fromNow();
}


var base = baseRepository({
    path: 'users',
    makeLocal: function (id, data) {
        return new User(id, data);
    },
    makeRemote: function (data) {
        return {
            name: data.name,
            corp: data.corporation,
            alliance: data.alliance,
            lastLogin: data.lastLogin,
            rs: data.routesSearched,
            la: data.lastActivity
        }
    },
    pruneRemote: true
});

var me = {
    get: base.get,
    getAll: base.getAll,
    getArray: base.getArray,
    create: base.create,
    update: base.update,
    'delete': base.delete,
    changed: base.changed,
    changedRemoveHandler: base.changedRemoveHandler,
    initialize: base.initialize
};
me.getByName = function (name) {
    var res = me.getArray().find(function (usr) {
        return usr.name === name;
    });
    return res;
}

module.exports = me;


