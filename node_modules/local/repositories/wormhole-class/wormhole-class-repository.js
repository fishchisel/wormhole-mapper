'use strict';

var request = require('local/fetch-file'),
    q = require('q');

var base = require('../base');

var WormholeClass = require('./wormhole-class');


var WORMHOLE_CLASSES_URL = 'data/wormhole-classes.json';

function getUrl() { return base.getStaticDataRoot() + WORMHOLE_CLASSES_URL };


// the main object
var me = {};

// fields
var wormholeClasses;
var wormholeClassesArray;

var initializeDefer;

me.initialize = function () {
    return _loadWormholeClasses();
};

//-----------------------------------------------------------------------------------------
// Load data

var _loadWormholeClasses = function () {
    if (!initializeDefer) {
        initializeDefer = q.defer();

        request(getUrl(), function (error, response, body) {
            if (error) {
                console.error(error);
                initializeDefer.reject(error);
            } else {
                var json = JSON.parse(body);
                _createLocalWormholeClasses(json);
                initializeDefer.resolve();

            }
        });
    }
    return initializeDefer.promise;
}

//-----------------------------------------------------------------------------------------
// Wormhole Classes 

var _createLocalWormholeClasses = function (classesJson) {
    wormholeClasses = {};
    wormholeClassesArray = [];
    classesJson.forEach(function (item) {
        var wormholeClass = new WormholeClass(item);
        wormholeClasses[item.className] = wormholeClass;
        wormholeClassesArray.push(wormholeClass);
    });
}

me.getWormholeClasses = function () {
    return wormholeClasses;
}
me.getWormholeClass = function (name) {
    return name ? wormholeClasses[name.toUpperCase()] : undefined;
}
me.searchWormholeClasses = function (query, maxResult, emptyIfMatch) {
    if (emptyIfMatch) {
        var cls = me.getWormholeClass(query);
        return cls ? cls : _searchWormholeClasses(query, maxResult);
    }
    else {
        return _searchWormholeClasses(query, maxResult);
    }
}
var _searchWormholeClasses = function (query, maxResult) {
    query = query.trim().toUpperCase();

    var results = [];
    for (var i = 0; i < wormholeClassesArray.length; i++) {
        var className = wormholeClassesArray[i].className.toUpperCase();
        if (className.startsWith(query))
            results.push(wormholeClassesArray[i]);
        if (results.length >= maxResult)
            break;
    }
    return results;
}


module.exports = me;