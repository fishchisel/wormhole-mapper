'use strict';

var WormholeClass = function (args) {
	this.totalMass = args.totalMass;
	this.maxIndividualMass = args.maxIndividualMass;
	this.className = args.className;
	this.massRegeneration = args.massRegeneration;
	this.maxStableTime = args.maxStableTime;
};

WormholeClass.FRIGATE_MASS = 1600000; // enyo, 400mm plate
WormholeClass.CRUISER_MASS = 15000000; // ishtar, 1600mm plate 
WormholeClass.BATTLECRUISER_MASS = 17000000; // prophecy, 1600mm plate
WormholeClass.BATTLESHIP_MASS = 100000000; // Apocalypse 2x 1600mm plate
WormholeClass.CAPITAL_MASS = 1200000000; // Dreadnought

WormholeClass.prototype.getMaxEolTime = function () {
    return this.maxStableTime / 4;
}

WormholeClass.prototype.getMaxShipSize = function () {
	var ms = this.maxIndividualMass;

	if (ms > WormholeClass.CAPITAL_MASS)
		return "Capital Ship";
	else if (ms > WormholeClass.BATTLESHIP_MASS)
		return "Battleship";
	else if (ms > WormholeClass.BATTLECRUISER_MASS)
		return "Battlecruiser";
	else if (ms > WormholeClass.CRUISER_MASS)
		return "Cruiser";
	else if (ms > WormholeClass.FRIGATE_MASS)
		return "Frigate";
	return "-";
}

WormholeClass.prototype.getMaxNumForMass = function (mass) {
	var ind = this.maxIndividualMass;
	var tot = this.totalMass;

	if (ind < mass)
		return 0;

	return Math.floor(tot / mass);
}

WormholeClass.prototype.getTooltip = function () {
	var lifetime = this.maxStableTime + "h";
	var regens = this.regen

	var ms = this.maxIndividualMass;

	var ts = [];

	ts.push({ num: this.getMaxNumForMass(WormholeClass.CAPITAL_MASS), type: "carriers" });
	ts.push({ num: this.getMaxNumForMass(WormholeClass.BATTLESHIP_MASS), type: "battleships" });
	ts.push({ num: this.getMaxNumForMass(WormholeClass.CRUISER_MASS), type: "cruisers" });
	//ts.push({num: this.getMaxNumForMass(WormholeClass.FRIGATE_MASS), type: "frigates"});

	var shipNumText = "";
	ts.forEach(function (item) {
		if (item.num === 0)
			return;

		var txt = " / " + item.num + " " + item.type;
		shipNumText = shipNumText + txt;
	});

	return "{0}".format(lifetime) + shipNumText;
}
WormholeClass.prototype.getPopoverData = function () {
    var output = {
        "Max Lifetime": this.maxStableTime + "h",
        "Max Ship Size": this.getMaxShipSize(),
        "Mass Regen": this.massRegeneration,
        "Mass Limit": this.totalMass.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
        "Carriers": this.getMaxNumForMass(WormholeClass.CAPITAL_MASS),
        "Battleships": this.getMaxNumForMass(WormholeClass.BATTLESHIP_MASS),
        "Battlecruisers": this.getMaxNumForMass(WormholeClass.BATTLECRUISER_MASS),
        "Cruisers": this.getMaxNumForMass(WormholeClass.CRUISER_MASS),
        "Frigates": this.getMaxNumForMass(WormholeClass.FRIGATE_MASS),
    }
    for (var key in output) {
        if (output[key] == 0) delete output[key];
    }

    return output;
}

module.exports = WormholeClass;