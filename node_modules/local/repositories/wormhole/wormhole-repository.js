'use strict';

var Wormhole = require('./wormhole');

var baseRepository = require('../base'),
    signatureRepository = require('../signature'),
    wormholeClassRepository = require('../wormhole-class'),
    userRepository = require('../user'),
    systemRepository = require('../system');

var q = require('q');


var base = baseRepository({
	path: 'wormholes',
	makeLocal: function (id, data) {
		return new Wormhole(id, data);
	},
	makeRemote: function (wrm) {
		var wormholeJson = {
			startSystem: wrm.startSystemId,
			endSystem: wrm.endSystemId,
			dateFound: wrm._dateFound ? wrm._dateFound : new Date().getTime(),
			lastModified: new Date().getTime(),
			lastObserved: wrm._lastObserved ? wrm._lastObserved : new Date().getTime(),
			wormholeClass: wrm.wormholeClassName ? wrm.wormholeClassName : null,
			knownDirection: wrm.wormholeClassName !== undefined,
			note: wrm.note && wrm.note.length <= 140 ? wrm.note : null,
			log: wrm.log ? wrm.log : {},
			eol: wrm.eolTime,
		}

		return wormholeJson;
	},
    pruneRemote: true,
});

var me = {
	get: base.get,
	getAll: base.getAll,
	getArray: base.getArray,
	create: base.create,
	update: base.update,
	//deleteWormhole: base.delete,
	changed: base.changed,
	changedRemoveHandler: base.changedRemoveHandler,
	//initialize: base.initialize,
    supressChanged: base.supressChanged
};
me.delete = function (wormhole, system) {
	if (wormhole) {
		var stSig = wormhole.getStartSignature();
		var edSig = wormhole.getEndSignature();
		if (stSig)
			signatureRepository.deleteSignature(stSig);
		if (edSig)
			signatureRepository.deleteSignature(edSig);

		base.delete(wormhole);
	}
};
me.initialize = function () {
    var wInit = base.initialize();
    var sInit = signatureRepository.initialize();
    var wcInit = wormholeClassRepository.initialize();
    var usInit = userRepository.initialize();
    var sysInit = systemRepository.initialize();
    
    return q.all([wInit, sInit, wcInit, usInit,sysInit]);
}


module.exports = me;