'use strict';

var moment = require('moment')
var logAccess = require('../log-access-helpers');

var _sysRep, _wormholeRep, _wormholeClassRep, _usrRep;
var _pathfinder;

var Wormhole = function (key, args) {
    if (!key)
        return;

    this.id = key;

    this.startSystemId = args.startSystem;
    this.endSystemId = args.endSystem;
    this.wormholeClassName = args.wormholeClass;

    this.lastModified = args.lastModified;
    this.knownDirection = args.knownDirection;

	// the acessor methods also depend on the date found of signatures.
    this._dateFound = args.dateFound;
    this._lastObserved = args.lastObserved;
    
    this.eolTime = args.eol;

    this.note = args.note;

    this.log = args.log ? args.log : {};
};
Wormhole.prototype.clone = function () {
    var wh = new Wormhole();
    wh.id = this.id;
    wh.startSystemId = this.startSystemId;
    wh.endSystemId = this.endSystemId;
    wh.wormholeClassName = this.wormholeClassName;
    wh.lastModified = this.lastModified;
    wh.knownDirection = this.knownDirection;
    wh._dateFound = this._dateFound;
    wh._lastObserved = this._lastObserved;
    wh.note = this.note;
    wh.eolTime = this.eolTime;

    wh.log = this.log;

    return wh;
}

Wormhole.SHORT_NOTE_LENGTH = 16;

//---------------------------------------------------------------------------------------------
// Dates
Wormhole.prototype.getDateFound = function () {
    var st = this.getStartSignature();
    var ed = this.getEndSignature();

    var out = this._dateFound;
    if (st) {
        out = Math.min(out, st.dateFound);
    }
    if (ed) {
        out = Math.min(out, ed.dateFound);
    }

    return out;
};
Wormhole.prototype.getLastObserved = function () {
    var st = this.getStartSignature();
    var ed = this.getEndSignature();

    var out = this._lastObserved;
    if (st) {
        out = Math.max(out, st.lastScanned);
    }
    if (ed) {
        out = Math.max(out, ed.lastScanned);
    }

    if (out === 0)
        return;
    return out;
};
Wormhole.prototype.getDateExpires = function () {
    var expiryTime = this.getDateFound() + this.getMaxHours() * 60 * 60 * 1000;
    
    if (!this.eolTime) return expiryTime;

    var wclass = this.getWormholeClass();
    var maxEolTime = wclass ? wclass.getMaxEolTime() : 6;

    return Math.min(this.eolTime + (maxEolTime * 60 * 60 * 1000),expiryTime);
}
Wormhole.prototype.isExpired = function () {
    return this.getDateExpires() < new Date().getTime();
}
Wormhole.prototype.isEol = function () {
    return this.eolTime;
}
Wormhole.prototype.getEolTimePretty = function () {
    if (!this.eolTime) return "(not EOL)";
    return moment(this.eolTime).format("HH:mm:ss");
}

Wormhole.prototype.getDateFoundPretty = function () {
    return moment(this.getDateFound()).format("llll");
}
Wormhole.prototype.getDateFoundFuzzy = function () {
    return moment(this.getDateFound()).fromNow();
}
Wormhole.prototype.getDateExpiresPretty = function () {
    return moment(this.getDateExpires()).format("llll");
}
Wormhole.prototype.getDateExpiresFuzzy = function () {
    if (this.getDateExpires() < new Date().getTime())
        return "(expired)";
    else {
        return moment(this.getDateExpires()).fromNow().replace(/^in /, "");
    }
}
Wormhole.prototype.getLastObservedPretty = function () {
    return moment(this.getLastObserved()).format("llll");
}
Wormhole.prototype.getLastObservedFuzzy = function () {
    return moment(this.getLastObserved()).fromNow();
}

//---------------------------------------------------------------------------------------------
// Class
Wormhole.prototype.getWormholeClass = function () {
    return _wormholeClassRep.getWormholeClass(this.wormholeClassName);
}
Wormhole.prototype.getClassName = function () {
    return this.wormholeClassName;
}
Wormhole.prototype.getClassNamePretty = function () {
    return this.wormholeClassName ? this.wormholeClassName : "-";
}
Wormhole.prototype.getMaxShipSizePretty = function () {
    return this.getWormholeClass() ? this.getWormholeClass().getMaxShipSize() : "-";
}
Wormhole.prototype.getMaxHours = function () {
    var cls = this.getWormholeClass();
    return cls ? cls.maxStableTime : 24;
}
Wormhole.prototype.hasClass = function () {
    return !(!(this.wormholeClassName));
}

//---------------------------------------------------------------------------------------------
// Misc Accessors
Wormhole.prototype.getStartSystem = function () {
    return _sysRep.getSystem(this.startSystemId);
}
Wormhole.prototype.getEndSystem = function () {
    return _sysRep.getSystem(this.endSystemId);
}
Wormhole.prototype.getStartSignature = function () {
    var sigs = this.getStartSystem().getSignatures();
    return sigs.find(function (s) { return s.wormholeId === this.id; }, this);
};
Wormhole.prototype.getEndSignature = function () {
    var sigs = this.getEndSystem().getSignatures();
    return sigs.find(function (s) { return s.wormholeId === this.id; }, this);
};

//---------------------------------------------------------------------------------------------
// Route info
Wormhole.prototype.getStaticJumps = function () {
    var jumps = _pathfinder.findStaticJumpCount({
        startSys: this.getStartSystem(),
        endSys: this.getEndSystem()
    });
    return jumps;
}

Wormhole.prototype.getStaticJumpsNoHighsec = function () {
    var jumps = _pathfinder.findStaticJumpCount({
        startSys: this.getStartSystem(),
        endSys: this.getEndSystem(),
        noHighsec: true
        });
    return jumps;
}
Wormhole.prototype.getClosestEndToHome = function () {
    var homeSystem = siteConfig.homeSystem;

    var startJumps = homeSystem.getStaticJumpsToSystem(this.getStartSystem());
    var endJumps = homeSystem.getStaticJumpsToSystem(this.getEndSystem());

    if (startJumps === null && endJumps === null)
        return null;
    if (startJumps === null)
        return this.getEndSystem();
    if (endJumps === null)
        return this.getStartSystem();

    if (startJumps < endJumps)
        return this.getStartSystem();
    return this.getEndSystem();
}
//---------------------------------------------------------------------------------------------
// Misc
Wormhole.prototype.getWormholeType = function () {
    var srt = this.getStartSystem().isWormholeSpace();
    var end = this.getEndSystem().isWormholeSpace();

    if (srt && end) {
    	return "w-w";
    }
    else if (srt || end) {
    	return "w-k";
    }
    else {
    	return "k-k";
    }
};
Wormhole.prototype.isWtoW = function () {
    return this.getWormholeType() === "w-w";
}
Wormhole.prototype.isWtoK = function () {
    return this.getWormholeType() === "w-k";
};
Wormhole.prototype.isKtoK = function () {
    return this.getWormholeType() === "k-k";
}
Wormhole.prototype.isDuplicate = function (other) {
    var a1 = this.startSystemId;
    var b1 = this.endSystemId;
    var a2 = other.startSystemId;
    var b2 = other.endSystemId;
    return (a1 === a2 && b1 === b2) || (a1 === b2 && b1 === a2);
}
Wormhole.prototype.hasDuplicate = function () {

    return _wormholeRep.getArray().some(function (wh) {
        if (wh.id === this.id)
            return false;
        return this.isDuplicate(wh);
    }, this);
}

Wormhole.prototype.noteIsShort = function () {
    return this.note ? this.note.length <= Wormhole.SHORT_NOTE_LENGTH : true;
}
Wormhole.prototype.noteIsMedium = function () {
    return !this.noteIsShort() && this.note.length <= 140;
}
Wormhole.prototype.noteIsTooLong = function () {
    return this.note ? this.note.length > 140 : false;
}

Wormhole.prototype.getShortNote = function () {
    if (!this.note)
    	return null;
    if (this.noteIsShort())
    	return this.note;
    else
    	return this.note.substring(0, Wormhole.SHORT_NOTE_LENGTH) + "\u2026"; //ellipses
}


Wormhole.prototype.getCreator = logAccess.getCreator;
Wormhole.prototype.getLastEditor = logAccess.getLastEditor;
Wormhole.prototype.getCreatorId = logAccess.getCreatorId;
Wormhole.prototype.getLastEditorId = logAccess.getLastEditorId;

Wormhole.attachRepositories = function (systemRep, wormholeRep, wormholeClassRep, userRep) {
    _sysRep = systemRep;
    _wormholeRep = wormholeRep;
    _wormholeClassRep = wormholeClassRep;
    _usrRep = userRep;
}

Wormhole.attachPathfinder = function (pathfinder) {
    _pathfinder = pathfinder;
}



module.exports = Wormhole;